<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>dfy</string>
	</array>
	<key>foldingStartMarker</key>
	<string>(\{\s*(//.*)?$|^\s*// \{\{\{)</string>
	<key>foldingStopMarker</key>
	<string>^\s*(\}|// \}\}\}$)</string>
	<key>name</key>
	<string>Dafny</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>begin</key>
			<string>(class)\s*(\w+)\s*</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.dafny</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.dafny</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\{</string>
			<key>name</key>
			<string>meta.class.identifier.dafny</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments-inline</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(class|trait|datatype|codatatype|type|newtype|function|ghost|nameonly|var|const|method|constructor|abstract|module|import|export|lemma|as|is|opened|static|twostate|refines|witness|extends|returns|break|then|else|if|label|return|while|for|to|downto|print|new|in|fresh|allocated|match|case|assert|by|assume|expect|reveal|modify|predicate|least|greatest|forall|exists|false|true|null|old|unchanged|calc|iterator|yields|yield)\b</string>
			<key>name</key>
			<string>keyword.control.dafny</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(\w+)\s*(&lt;[^&gt;]+&gt;)?\s*\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.dafny</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.method.identifier.dafny</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#parameters</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>include</key>
			<string>#code</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>code</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments-inline</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#keywords</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#strings</string>
				</dict>
			</array>
		</dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.dafny</string>
						</dict>
					</dict>
					<key>match</key>
					<string>/\*\*/</string>
					<key>name</key>
					<string>comment.block.empty.dafny</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments-inline</string>
				</dict>
			</array>
		</dict>
		<key>comments-inline</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.dafny</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.dafny</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>comment.line.double-slash.dafny</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.dafny</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\s*((//).*$\n?)</string>
				</dict>
			</array>
		</dict>
		<key>strings</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>end</key>
					<string>("|\n)</string>
					<key>name</key>
					<string>string.dafny</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\\((\\)|("))</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>keywords</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(class|trait|datatype|codatatype|type|newtype|function|include|ghost|nameonly|var|const|method|constructor|abstract|module|import|export|lemma|as|is|opened|static|twostate|refines|witness|extends|returns|break|then|else|if|label|return|while|for|to|downto|print|new|in|fresh|allocated|match|case|assert|by|assume|expect|reveal|modify|predicate|least|greatest|forall|exists|false|true|null|old|unchanged|calc|iterator|yields|yield)\b</string>
					<key>name</key>
					<string>keyword.control.dafny</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(function)\b</string>
					<key>name</key>
					<string>entity.name.function</string>
				</dict>
				<dict>
					<key>match</key>
					<string>;</string>
					<key>name</key>
					<string>punctuation.terminator.dafny</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(requires|ensures|modifies|reads|invariant|decreases|reveals|provides)\b</string>
					<key>name</key>
					<string>keyword.control.verify.dafny</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(bool|char|real|multiset|map|imap|nat|int|ORDINAL|object|string|set|iset|seq|array|array[1-9]\d*|bv0|bv[1-9]\d*)\b</string>
					<key>name</key>
					<string>keyword.type.dafny</string>
				</dict>
				<dict>
					<key>match</key>
					<string>this</string>
					<key>name</key>
					<string>storage.type.dafny</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\|:</string>
					<key>name</key>
					<string>keyword.control.dafny</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(==|!=|&lt;=|&gt;=|&lt;|&gt;)</string>
					<key>name</key>
					<string>keyword.operator.comparison.dafny</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(:=)</string>
					<key>name</key>
					<string>keyword.operator.assignment.dafny</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\-|\+|\*|\/|%)</string>
					<key>name</key>
					<string>keyword.operator.arithmetic.dafny</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(!|&amp;&amp;|\|\||&lt;==&gt;|==&gt;|&lt;==)</string>
					<key>name</key>
					<string>keyword.operator.logical.dafny</string>
				</dict>
			</array>
		</dict>
		<key>parameters</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>:\s*(\w+)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.dafny</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\s*|,|\)|\}|requires|ensures|modifies</string>
					<key>name</key>
					<string>meta.type.identifier.dafny</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#generics</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments-inline</string>
				</dict>
				<!--dict> Turn on if we want to support nested method calls
					<key>include</key>
					<string>$self</string>
				</dict-->
				<dict>
					<key>include</key>
					<string>#strings</string>
				</dict>
			</array>
		</dict>
		<key>generics</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>&lt;(?=\w+)</string>
					<key>end</key>
					<string>&gt;</string>
					<key>name</key>
					<string>meta.type.identifier.dafny</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#code</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>text.dfy.dafny</string>
	<key>uuid</key>
	<string>f4eb6552-5503-47cf-9d18-6388d0981235</string>
</dict>
</plist>
